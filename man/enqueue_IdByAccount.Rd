% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/enqueue_IdByAccount.R
\name{enqueue_IdByAccount}
\alias{enqueue_IdByAccount}
\title{Get account ids by account name clean}
\usage{
enqueue_IdByAccount(..., fun = "QueueRanked", chunk_length = 200L,
  n_ids = 10L, construct_only = FALSE)
}
\arguments{
\item{...}{(required) Named args to pass to fun. Accepts bare named elements, a vector of named elements,
or a list of named elements.}

\item{fun}{(optional) A quoted function; defaults to \code{QueueRanked} and generally should be
left as such. Not used if \code{construct_only = TRUE}.}

\item{chunk_length}{(optional) An integer vector of length 1 denoting the number of rows to pull for
each chunk, based on the first (parent) element (\emph{Account Name}). Defaults to \code{200}.}

\item{n_ids}{(optional) An integer vector of length 1 denoting the number of child elements to pull for each
parent element. Defaults to \code{10}.}

\item{construct_only}{(optional) A logical vector of length 1 denoting if the function should only output the
argument lists, and not actually enqueue the server}
}
\value{
If \code{construct_only = FALSE} (default), a list of report IDs that can be passed to
\link[RSiteCatalyst]{GetReport}. Otherwise, a nested list of arguments that can be
passed to the appropriate function of your choice.
}
\description{
Efficiently run a breakdown report, of account ids by account name clean
}
\details{
The purpose of this function is to streamline the otherwise lengthy process of pulling down
account ids by account name (clean). This function does so by chunking the call across
the total number of account names (clean) into \emph{chunk_length}-long pieces, i.e. \code{200}-
row requests (by default).

\code{...} should consist of your basic query parameters, and the following must be present:

\itemize{
\item \code{reportsuite.id}
\item \code{date.from}
\item \code{date.to}
\item \code{metrics}
}

Additional arguments accepted by \code{fun} are passed-through, with the \strong{exception} of:

\itemize{
\item \code{elements}
\item \code{classification}
}

If either of these two named elements are detected, they will be (silently) removed and replaced
with the default arguments, namely

\itemize{
\item \code{elements = c("evar7", "prop1")}
\item \code{classification = c("Account Name [v2] Clean", "")}
}

Note that if you pass any arguments of \code{fun} that are vectors of length > 1, you must do so
as a \code{list}, else the key-value structure will be corrputed by \code{c()}, which is called on
args passed to \code{...}.

Finally, if an argument of \code{top} is not included, this function will call \code{fun} along with
a calculated metric, id \code{cm300000520_57bbb21bec83505f3c442b1d}, to determine the maximum number of
account names (clean) according to your other input parameters (passed in via \code{...}). This requires
that you have access to said calculated metric, and takes a bit of extra time, in exchange for convenience.
Including a named element of \code{top} with a valid value bypasses this step (and its requirements).
}
\note{
You may wish to experiment with the threshold for \emph{chunk_length} to see if e.g. lower values improve
performance. This is often the case, within reason.

Even with a reasonably low \emph{chunk_length} (which \code{200} is), you should still check the Queue via
\link[RSiteCatalyst]{GetReport} or \link{check_Queue} to ensure all your reports have processed prior to
requesting them. You should expect to wait more than 5 minutes, even when using this approach.
}
\examples{
\dontrun{
## Offline-compatible; API access not needed for these two examples
# Only generate an argument list, and do not call the API to get 'top'
enqueue_IdByAccount(
    date.from = "2016-01-01", date.to = Sys.Date(),
    metrics = "visits",
    reportsuite.id = "elsevier-rx-prod",
    top = 2063,
    construct_only = TRUE
)
# Only generate an argument list, and do not call the API to get 'top'
# Note that you must use a list if you need to pass in args
#  to ... that are of length > 1!
enqueue_IdByAccount(
    list(date.from = "2016-01-01", date.to = Sys.Date(),
    metrics = c("visits", "uniquevisitors"),
    segment.id = c("segment1", "segment2"),
    reportsuite.id = "elsevier-rx-prod",
    top = 2063),
 construct_only = TRUE
)

## API access needed for these examples
# Only generate an argument list and call the API to get 'top'
enqueue_IdByAccount(
    date.from = "2016-01-01", date.to = Sys.Date(),
    metrics = "visits",
    reportsuite.id = "elsevier-rx-prod"
)
# Enqueue reports and call the API to get 'top'
enqueue_IdByAccount(
    date.from = "2016-01-01", date.to = Sys.Date(),
    metrics = "visits",
    reportsuite.id = "elsevier-rx-prod"
)
}
}
